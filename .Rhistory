glimpse(all.measures)
ggplot(all.measures,
aes(x = genotypes.sampled, y = total_complexity)) +
geom_jitter(shape = 1,
color = "grey",
position = position_jitter(width = 0.15, height = NULL),
size = 1) +
stat_summary(fun.y = mean, geom = "point", color = "steelblue", size = 3) +
#geom_hline(yintercept = single.complexity.max, linetype = "dashed") +
xlab("No. of willow genotypes") +
ylab(bquote('Food-web complexity ('*italic(LD[q])*')')) +
scale_x_continuous(limits = c(0.5,25),
breaks = c(1,5,10,15,20,25)) +
scale_y_continuous(limits = c(1,2.5), #c(1,2.4)
breaks = seq(1, 2.5, by = 0.5)) +
theme_bw() +
theme(axis.text.y = element_text(size = 9),#10
axis.text.x = element_text(size = 9),#10
axis.title.x = element_text(size = 11, vjust = 0.1),#vjust = 0.1,
axis.title.y = element_text(size = 11, vjust = 0.5),#vjust = 1,
panel.grid = element_blank())
ggplot(all.measures,
aes(x = genotypes.sampled, y = total_complexity)) +
geom_jitter(shape = 1,
color = "grey",
position = position_jitter(width = 0.15, height = NULL),
size = 1) +
stat_summary(fun.y = mean, geom = "point", color = "steelblue", size = 3) +
geom_point(data = summary.data.plots, aes(x = genotypes.sampled, y = total_complexity_mean.mean.mean)) +
xlab("No. of willow genotypes") +
ylab(bquote('Food-web complexity ('*italic(LD[q])*')')) +
scale_x_continuous(limits = c(0.5,25),
breaks = c(1,5,10,15,20,25)) +
scale_y_continuous(limits = c(1,2.5), #c(1,2.4)
breaks = seq(1, 2.5, by = 0.5)) +
theme_bw() +
theme(axis.text.y = element_text(size = 9),#10
axis.text.x = element_text(size = 9),#10
axis.title.x = element_text(size = 11, vjust = 0.1),#vjust = 0.1,
axis.title.y = element_text(size = 11, vjust = 0.5),#vjust = 1,
panel.grid = element_blank())
max(all.measures$total_complexity)
max(all.measures$total_complexity, na.rm = TRUE)
ggplot(all.measures,
aes(x = genotype.richness, y = link.density.plant_gall)) +
geom_jitter(shape = 1, color = "grey", position = position_jitter(width = 0.15, height = NULL)) +
stat_summary(fun.y = mean, geom = "point", color = "steelblue", size = 8) +
xlab("Genetic variation (no. of genotypes)") + ylab("Food web complexity index") +
scale_x_continuous(limits = c(0,25), breaks = 1:25) +
scale_y_continuous(limits = c(1,2.5), breaks = seq(1,2.5, by = 0.25)) +
theme_bw() +
theme(axis.text = element_text(size = 14),
axis.title.x = element_text(size = 16, vjust = 0.1),
axis.title.y = element_text(size = 16, vjust = 1),
panel.grid = element_blank())
ggplot(all.measures,
aes(x = genotypes.sampled, y = link.density.plant_gall)) +
geom_jitter(shape = 1, color = "grey", position = position_jitter(width = 0.15, height = NULL)) +
stat_summary(fun.y = mean, geom = "point", color = "steelblue", size = 8) +
xlab("Genetic variation (no. of genotypes)") + ylab("Food web complexity index") +
scale_x_continuous(limits = c(0,25), breaks = 1:25) +
scale_y_continuous(limits = c(1,2.5), breaks = seq(1,2.5, by = 0.25)) +
theme_bw() +
theme(axis.text = element_text(size = 14),
axis.title.x = element_text(size = 16, vjust = 0.1),
axis.title.y = element_text(size = 16, vjust = 1),
panel.grid = element_blank())
ggplot(all.measures,
aes(x = genotypes.sampled, y = link.density.gall_ptoid)) +
geom_jitter(shape = 1, color = "grey", position = position_jitter(width = 0.15, height = NULL)) +
stat_summary(fun.y = mean, geom = "point", color = "steelblue", size = 8) +
xlab("Genetic variation (no. of genotypes)") + ylab("Food web complexity index") +
scale_x_continuous(limits = c(0,25), breaks = 1:25) +
scale_y_continuous(limits = c(1,2.85), breaks = seq(1,2.75, by = 0.25)) +
theme_bw() +
theme(axis.text = element_text(size = 14),
axis.title.x = element_text(size = 16, vjust = 0.1),
axis.title.y = element_text(size = 16, vjust = 1),
panel.grid = element_blank())
## c
web.measures.summary <- all.measures %>%
group_by(genotypes.sampled) %>%
summarise(mean.complexity = mean(total_complexity, na.rm = TRUE))
with(web.measures.summary, max(mean.complexity)/min(mean.complexity)) # 52% increase in food-web complexity
web.measures.summary
alpha.summary <- all.measures %>%
filter(genotypes.sampled == 1) %>%
#group_by(df.sim.number) %>%
summarise(alpha.mean = mean(total_complexity),
alpha.min = min(total_complexity)) %>%
mutate(alpha.contrib = alpha.mean - alpha.min)
gamma.summary <- all.measures %>%
filter(genotypes.sampled == 25) %>%
#group_by(df.sim.number) %>%
summarise(gamma = mean(total_complexity))
gamm.summary
gamma.summary
alpha.summary
alpha.summary <- all.measures %>%
filter(genotypes.sampled == 1) %>%
#group_by(df.sim.number) %>%
summarise(alpha.mean = mean(total_complexity, na.rm = TRUE),
alpha.min = min(total_complexity, na.rm = TRUE)) %>%
mutate(alpha.contrib = alpha.mean - alpha.min)
alpha.summary
gamma.summary <- all.measures %>%
filter(genotypes.sampled == 25) %>%
#group_by(df.sim.number) %>%
summarise(gamma = mean(total_complexity))
gamma.summary
cbind(alpha.summary, gamma.summary)
beta.summary <- cbind(alpha.summary, gamma.summary) %>%
mutate(beta.contrib = gamma - alpha.mean,
total.contrib = gamma - alpha.min,
beta.prop.contrib = beta.contrib/total.contrib,
alpha.prop.contrib = alpha.contrib/total.contrib,
beta.magnitude = gamma/alpha.mean,
gamma.magnitude = gamma/alpha.min)
beta.summary
alpha.summary <- all.measures %>%
filter(genotypes.sampled == 1) %>%
group_by(df.sim.number) %>%
summarise(alpha.mean = mean(total_complexity, na.rm = TRUE),
alpha.min = min(total_complexity, na.rm = TRUE)) %>%
mutate(alpha.contrib = alpha.mean - alpha.min)
gamma.summary <- all.measures %>%
filter(genotypes.sampled == 25) %>%
group_by(df.sim.number) %>%
summarise(gamma = mean(total_complexity))
beta.summary <- left_join(alpha.summary, gamma.summary, by = "df.sim.number") %>%
mutate(beta.contrib = gamma - alpha.mean,
total.contrib = gamma - alpha.min,
beta.prop.contrib = beta.contrib/total.contrib,
alpha.prop.contrib = alpha.contrib/total.contrib,
beta.magnitude = gamma/alpha.mean,
gamma.magnitude = gamma/alpha.min)
beta.summary
beta.summary %>%
filter(alpha.min > 0) %>%
summarise_each(funs(mean, sd)) %>%
select(-df.sim.number_mean, -df.sim.number_sd) %>%
as.matrix(.)
final.summary <- beta.summary %>%
filter(alpha.min > 0) %>%
summarise_each(funs(mean, sd)) %>%
select(-df.sim.number_mean, -df.sim.number_sd) %>%
as.matrix(.)
final.summary
beta.summary %>%
filter(alpha.min > 0) %>%
summarise_each(funs(mean, sd))
final.summary <- beta.summary %>%
filter(alpha.min > 0) %>%
summarise_each(funs(mean, sd)) %>%
select(-df.sim.number_mean, -df.sim.number_sd) %>%
as.matrix(.)
final.summary
alpha.summary <- all.measures %>%
filter(genotypes.sampled == 1) %>%
group_by(df.sim.number) %>%
summarise(alpha.mean = mean(total_complexity, na.rm = TRUE),
alpha.min = 1) %>% # minimum value that food-web complexity can take
mutate(alpha.contrib = alpha.mean - alpha.min)
gamma.summary <- all.measures %>%
filter(genotypes.sampled == 25) %>%
group_by(df.sim.number) %>%
summarise(gamma = mean(total_complexity))
beta.summary <- left_join(alpha.summary, gamma.summary, by = "df.sim.number") %>%
mutate(beta.contrib = gamma - alpha.mean,
total.contrib = gamma - alpha.min,
beta.prop.contrib = beta.contrib/total.contrib,
alpha.prop.contrib = alpha.contrib/total.contrib,
beta.magnitude = gamma/alpha.mean,
gamma.magnitude = gamma/alpha.min)
final.summary <- beta.summary %>%
filter(alpha.min > 0) %>%
summarise_each(funs(mean, sd)) %>%
select(-df.sim.number_mean, -df.sim.number_sd) %>%
as.matrix(.)
final.summary
source('~/Documents/Genotype_Networks/Rscripts/network_management_tree_level.R')
source('~/Documents/miscellaneous_R/ggplot_themes.R')
source('~/Documents/ggnet/bipartite_plot_info.R')
source('~/Documents/ggnet/tripartite_plot_info.R')
require(ggplot2)
#devtools::install_github("hadley/ggplot2")
require(gridExtra)
require(dplyr)
require(tidyr)
require(vegan)
## for an unknown reason, ggsave needs to be modified for me to save my arrangeGrob object ----
#ggsave <- ggplot2::ggsave; body(ggsave) <- body(ggplot2::ggsave)[-2]
## create theme for figures ----
theme_links <- theme_bw() +
theme(axis.title.x = element_text(size = 11, vjust = -0.25), # size = 12
axis.title.y = element_text(size = 11, vjust = 1.25), # size = 12
axis.text.y = element_text(size = 9),#10
axis.text.x = element_text(size = 8), #12
strip.text = element_text(size = 9), #9
panel.grid = element_blank(),
legend.position = "none")
point.size.range <- c(1,3) #c(1,5)
point.size.range.ptism <- c(0.25,3)#c(1,3.5)
label.x.pos <- 1.5 #2
label.y.galls <- c(20,16,2.6) #23 # 21
label.y.gallsize <- 14 #13.75
label.y.ptoids <- c(8.1,3.65,2.75) #9.5 #9.75
label.y.ptism <- 1
label.size <- 3 # 3
ABCD.allgalls <- data.frame(x = rep(label.x.pos,4), y = rep(label.y.galls,4),
variable = c("Leaf gall", "Apical-stem gall",
"Bud gall", "Mid-stem gall"),
labels = c("(A)","(B)","(C)","(D)"))
ABC.domgalls <- data.frame(x = rep(label.x.pos,3), y = label.y.galls,#3),
variable = c("Leaf gall","Bud gall", "Apical-stem gall"),
labels = c("(A)","(B)","(C)"))
D.gallsize <- data.frame(x = label.x.pos, y = label.y.gallsize, labels = "(D)")
ABC.domptoids <- data.frame(x = rep(label.x.pos,3), y = label.y.ptoids,
Parasitoid = c("Platygaster", "Mesopolobus", "Torymus"),
labels = c("(A)","(B)","(C)"))
EFG.domptoids <- data.frame(x = rep(label.x.pos,3), y = rep(label.y.ptoids,3),
Parasitoid = c("Platygaster", "Mesopolobus", "Torymus"),
labels = c("(E)","(F)","(G)"))
D.ptism <- data.frame(x = label.x.pos, y = label.y.ptism, labels = "(D)")
H.ptism <- data.frame(x = label.x.pos, y = label.y.ptism, labels = "(H)")
A.linkabund <- data.frame(x = 0.5, y = 10, labels = "(A)")
B.ptism <- data.frame(x = 4.25, y = label.y.ptism, labels = "(B)")
AB.ptism <- data.frame(x = rep(4.25,2), y = rep(1,2),
labels = c("(A)","(B)"), cut.vLG_abund = c("Low leaf gall abundance (1 - 4 per branch)", "High leaf gall abundance (5 - 22 per branch)"))
#point.size <- 6
line.widths <- 2 # for link plots (3 for full page plots)
## create color-blind friendly palette with grey (taken from http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
## make integer breaks for facet plotting in ggplot
library("scales")
integer_breaks <- function(n = 5, ...) {
breaker <- pretty_breaks(n, ...)
function(x) {
breaks <- breaker(x)
breaks[breaks == floor(breaks)]
}
}
## change Genotype * to C for plotting aesthetics
levels(tree_level_interaxn_all_plants_traits_size$Genotype)[1] <- "C"
source('~/Documents/Genotype_Networks/Rscripts/network_management_tree_level.R')
source('~/Documents/miscellaneous_R/ggplot_themes.R')
source('~/Documents/ggnet/bipartite_plot_info.R')
source('~/Documents/ggnet/tripartite_plot_info.R')
require(ggplot2)
#devtools::install_github("hadley/ggplot2")
require(gridExtra)
require(dplyr)
require(tidyr)
require(vegan)
## for an unknown reason, ggsave needs to be modified for me to save my arrangeGrob object ----
#ggsave <- ggplot2::ggsave; body(ggsave) <- body(ggplot2::ggsave)[-2]
## create theme for figures ----
theme_links <- theme_bw() +
theme(axis.title.x = element_text(size = 11, vjust = -0.25), # size = 12
axis.title.y = element_text(size = 11, vjust = 1.25), # size = 12
axis.text.y = element_text(size = 9),#10
axis.text.x = element_text(size = 8), #12
strip.text = element_text(size = 9), #9
panel.grid = element_blank(),
legend.position = "none")
point.size.range <- c(1,3) #c(1,5)
point.size.range.ptism <- c(0.25,3)#c(1,3.5)
label.x.pos <- 1.5 #2
label.y.galls <- c(20,16,2.6) #23 # 21
label.y.gallsize <- 14 #13.75
label.y.ptoids <- c(8.1,3.65,2.75) #9.5 #9.75
label.y.ptism <- 1
label.size <- 3 # 3
ABCD.allgalls <- data.frame(x = rep(label.x.pos,4), y = rep(label.y.galls,4),
variable = c("Leaf gall", "Apical-stem gall",
"Bud gall", "Mid-stem gall"),
labels = c("(A)","(B)","(C)","(D)"))
ABC.domgalls <- data.frame(x = rep(label.x.pos,3), y = label.y.galls,#3),
variable = c("Leaf gall","Bud gall", "Apical-stem gall"),
labels = c("(A)","(B)","(C)"))
D.gallsize <- data.frame(x = label.x.pos, y = label.y.gallsize, labels = "(D)")
ABC.domptoids <- data.frame(x = rep(label.x.pos,3), y = label.y.ptoids,
Parasitoid = c("Platygaster", "Mesopolobus", "Torymus"),
labels = c("(A)","(B)","(C)"))
EFG.domptoids <- data.frame(x = rep(label.x.pos,3), y = rep(label.y.ptoids,3),
Parasitoid = c("Platygaster", "Mesopolobus", "Torymus"),
labels = c("(E)","(F)","(G)"))
D.ptism <- data.frame(x = label.x.pos, y = label.y.ptism, labels = "(D)")
H.ptism <- data.frame(x = label.x.pos, y = label.y.ptism, labels = "(H)")
A.linkabund <- data.frame(x = 0.5, y = 10, labels = "(A)")
B.ptism <- data.frame(x = 4.25, y = label.y.ptism, labels = "(B)")
AB.ptism <- data.frame(x = rep(4.25,2), y = rep(1,2),
labels = c("(A)","(B)"), cut.vLG_abund = c("Low leaf gall abundance (1 - 4 per branch)", "High leaf gall abundance (5 - 22 per branch)"))
#point.size <- 6
line.widths <- 2 # for link plots (3 for full page plots)
## create color-blind friendly palette with grey (taken from http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
## make integer breaks for facet plotting in ggplot
library("scales")
integer_breaks <- function(n = 5, ...) {
breaker <- pretty_breaks(n, ...)
function(x) {
breaks <- breaker(x)
breaks[breaks == floor(breaks)]
}
}
## change Genotype * to C for plotting aesthetics
levels(tree_level_interaxn_all_plants_traits_size$Genotype)[1] <- "C"
## load required libraries
#require(visreg)
require(ggplot2)
require(grid)
require(dplyr)
#require(piecewiseSEM)
#require(semPlot)
## upload results from simulation
all.measures <- read.csv("~/Documents/Genotype_Networks/data/food web complexity simulation 40 reps of 100 sims.csv")
dim(all.measures)[1] # 88605 unique simulations. 100,00 simulations originally run
table(all.measures$genotypes.sampled)
alpha.summary <- all.measures %>%
filter(genotypes.sampled == 1) %>%
group_by(df.sim.number) %>%
summarise(alpha.mean = mean(total_complexity, na.rm = TRUE),
alpha.min = 1) %>% # minimum value that food-web complexity can take
mutate(alpha.contrib = alpha.mean - alpha.min)
gamma.summary <- all.measures %>%
filter(genotypes.sampled == 25) %>%
group_by(df.sim.number) %>%
summarise(gamma = mean(total_complexity))
beta.summary <- left_join(alpha.summary, gamma.summary, by = "df.sim.number") %>%
mutate(beta.contrib = gamma - alpha.mean,
total.contrib = gamma - alpha.min,
beta.prop.contrib = beta.contrib/total.contrib,
alpha.prop.contrib = alpha.contrib/total.contrib,
beta.magnitude = gamma/alpha.mean,
gamma.magnitude = gamma/alpha.min)
final.summary <- beta.summary %>%
filter(alpha.min > 0) %>%
summarise_each(funs(mean, sd)) %>%
select(-df.sim.number_mean, -df.sim.number_sd) %>%
as.matrix(.)
# setup multipanel plot for combining ggplot and base graphics (ordination from "link_composition_plots")
## plot the relationship between genetic variation and total food web complexity (weighted linkage density)
total <- ggplot(all.measures,
aes(x = genotypes.sampled, y = total_complexity)) +
geom_jitter(shape = 1,
color = "grey",
position = position_jitter(width = 0.15, height = NULL),
size = 1) +
stat_summary(fun.y = mean, geom = "point", color = "steelblue", size = 3) +
xlab("No. of willow genotypes") +
ylab(bquote('Food-web complexity ('*italic(LD[q])*')')) +
scale_x_continuous(limits = c(0.5,25),
breaks = c(1,5,10,15,20,25)) +
scale_y_continuous(limits = c(1,2.5), #c(1,2.4)
breaks = seq(1, 2.5, by = 0.5)) +
theme_bw() +
theme(axis.text.y = element_text(size = 9),#10
axis.text.x = element_text(size = 9),#10
axis.title.x = element_text(size = 11, vjust = 0.1),#vjust = 0.1,
axis.title.y = element_text(size = 11, vjust = 0.5),#vjust = 1,
panel.grid = element_blank())
veganCovEllipse <- function (cov, center = c(0, 0), scale = 1, npoints = 100)
{
theta <- (0:npoints) * 2 * pi/npoints
Circle <- cbind(cos(theta), sin(theta))
t(center + scale * t(Circle %*% chol(cov)))
}
# data for ellipse.
df_ell.cap.geno <- data.frame() #sets up a data frame before running the function.
for(g in levels(sites.cap.geno$Genotype)){
df_ell.cap.geno <- rbind(df_ell.cap.geno,
cbind(as.data.frame(
with(sites.cap.geno[sites.cap.geno$Genotype == g, ],
veganCovEllipse(ellip[[g]]$cov, ellip[[g]]$center, ellip[[g]]$scale))), Genotype = g))
}
B.compliment <- data.frame(x = -2.925, y = 2.4, labels = "(B)") # plot label
compliment <- ggplot(data = df_ell.cap.geno, aes(x = CAP1, y = CAP2, group = Genotype)) +
coord_fixed(ratio = 1) + #, xlim= c(-3.3,3.3)) + #xlim = c(-3,3.2)
geom_polygon(color = NA, fill = "gray50", alpha = 0.5) + # didn't use stat_ellipse because I wanted to plot standard errors instead of 95% confidence intervals
geom_text(data = centroids.cap.geno,
aes(x = CAP1, y = CAP2, label = Genotype), size = 2) +
#scale_x_continuous(limits = c(-3,2)) +
#geom_text(data = B.compliment, aes(x = x, y = y, label = labels),
#          inherit.aes = FALSE, size = 4) +
theme_bw() +
theme(axis.text.y = element_text(size = 6),#10
axis.text.x = element_text(size = 6),#10
axis.title.x = element_text(size = 8, vjust = 0.75),#vjust = 0.1,
axis.title.y = element_text(size = 8, vjust = 0.25),#vjust = 0.5,
panel.grid = element_blank(),
plot.margin = unit(c(0,0,0,0), "in"))
# adjust plot.margin
vp <- viewport(width = 0.4, height = 0.4, x = 0.7, y = 0.35)
tiff("~/Documents/Genotype_Networks/figures/fig_6_complexity_complimentarity.tif", width = 3.42, height = 4, units = "in", res = 600)
print(total)
print(compliment, vp = vp)
dev.off() # tur
full.links.df <- as.data.frame(tree_level_interaxn_all_plants_traits_size) %>%
select(Genotype,
vLG_abund, aSG_abund, rG_abund, SG_abund, # willow-gall links
vLG_Platy, vLG_Tory, vLG_Mesopol, vLG_Eulo, vLG_Mymarid, # vLG-ptoid links
rG_Platy, rG_Tory, rG_Mesopol, rG_Eulo, rG_Lestodip, # rG-ptoid links
SG_Platy, aSG_Tory) # other gall-ptoid links
all.links <- names(full.links.df)[-1]
trees.with.links <- which(rowSums(full.links.df[ ,all.links]) > 0)
table(full.links.df$Genotype[trees.with.links]) # J, N, and U have 2 or less replicates with any links.
full.links.df.sub <- filter(full.links.df[trees.with.links, ],
Genotype != "J",
Genotype != "N",
Genotype != "U")
## analysis of dissimilarity
adonis(full.links.df.sub[ ,all.links] ~ Genotype, data = full.links.df.sub, distance = "bray")
anova(betadisper(vegdist(full.links.df.sub[ ,all.links], "bray"), full.links.df.sub$Genotype)) # no difference in betadiversity
full.links.meandist <- meandist(vegdist(full.links.df.sub[ ,all.links], "bray"), full.links.df.sub$Genotype)
summary(full.links.meandist)
mean(full.links.meandist[lower.tri(full.links.meandist, diag = TRUE)]) # eseentially matches summary, may be slightly different due to weightings.
max(full.links.meandist[lower.tri(full.links.meandist, diag = TRUE)])
min(full.links.meandist[lower.tri(full.links.meandist, diag = TRUE)])
## perform RDA analyses and extract centroid scores for plotting.
cap.geno <- capscale(full.links.df.sub[ ,all.links] ~ Genotype,
data = full.links.df.sub,
distance = "bray")
summary(cap.geno)
centroids.cap.geno <- data.frame(scores(cap.geno, choices = c(1,2), display = "cn"))
rownames(centroids.cap.geno) <- levels(full.links.df$Genotype)[-c(10,14,21)] # remove Genotypes J, N, and U
centroids.cap.geno$Genotype <- rownames(centroids.cap.geno)
sites.cap.geno <- data.frame(scores(cap.geno, choices = c(1,2), display = "sites"), droplevels(full.links.df.sub$Genotype))
colnames(sites.cap.geno)[3] <- "Genotype"
plot.new() # need to call this for ordiellipse function to work
ellip <- ordiellipse(cap.geno, groups = full.links.df.sub$Genotype,
kind = "se", draw = "polygon", #Note that by specificying the kind of ellipse in ordiellipse will make sure the type of ellipse you want is drawn (e.g. standard error or 95% CI)
col= "gray50", #"gainsboro",
border = NA, label = T)
## ggplot2 ordination plot ----
# function for ellipses: taken from the excellent stackoverflow Q+A: http://stackoverflow.com/questions/13794419/plotting-ordiellipse-function-from-vegan-package-onto-nmds-plot-created-in-ggplot2. Another useful reference was https://oliviarata.wordpress.com/2014/04/17/ordinations-in-ggplot2/
veganCovEllipse <- function (cov, center = c(0, 0), scale = 1, npoints = 100)
{
theta <- (0:npoints) * 2 * pi/npoints
Circle <- cbind(cos(theta), sin(theta))
t(center + scale * t(Circle %*% chol(cov)))
}
# data for ellipse.
df_ell.cap.geno <- data.frame() #sets up a data frame before running the function.
for(g in levels(sites.cap.geno$Genotype)){
df_ell.cap.geno <- rbind(df_ell.cap.geno,
cbind(as.data.frame(
with(sites.cap.geno[sites.cap.geno$Genotype == g, ],
veganCovEllipse(ellip[[g]]$cov, ellip[[g]]$center, ellip[[g]]$scale))), Genotype = g))
}
B.compliment <- data.frame(x = -2.925, y = 2.4, labels = "(B)") # plot label
compliment <- ggplot(data = df_ell.cap.geno, aes(x = CAP1, y = CAP2, group = Genotype)) +
coord_fixed(ratio = 1) + #, xlim= c(-3.3,3.3)) + #xlim = c(-3,3.2)
geom_polygon(color = NA, fill = "gray50", alpha = 0.5) + # didn't use stat_ellipse because I wanted to plot standard errors instead of 95% confidence intervals
geom_text(data = centroids.cap.geno,
aes(x = CAP1, y = CAP2, label = Genotype), size = 2) +
#scale_x_continuous(limits = c(-3,2)) +
#geom_text(data = B.compliment, aes(x = x, y = y, label = labels),
#          inherit.aes = FALSE, size = 4) +
theme_bw() +
theme(axis.text.y = element_text(size = 6),#10
axis.text.x = element_text(size = 6),#10
axis.title.x = element_text(size = 8, vjust = 0.75),#vjust = 0.1,
axis.title.y = element_text(size = 8, vjust = 0.25),#vjust = 0.5,
panel.grid = element_blank(),
plot.margin = unit(c(0,0,0,0), "in"))
# adjust plot.margin
vp <- viewport(width = 0.4, height = 0.4, x = 0.7, y = 0.35)
tiff("~/Documents/Genotype_Networks/figures/fig_6_complexity_complimentarity.tif", width = 3.42, height = 4, units = "in", res = 600)
print(total)
print(compliment, vp = vp)
dev.off() # turn off png device
total <- ggplot(all.measures,
aes(x = genotypes.sampled, y = total_complexity)) +
geom_jitter(shape = 1,
color = "grey",
position = position_jitter(width = 0.25, height = NULL),
size = 1) +
stat_summary(fun.y = mean, geom = "point", color = "steelblue", size = 3) +
xlab("No. of willow genotypes") +
ylab(bquote('Food-web complexity ('*italic(LD[q])*')')) +
scale_x_continuous(limits = c(0.5,25),
breaks = c(1,5,10,15,20,25)) +
scale_y_continuous(limits = c(1,2.5), #c(1,2.4)
breaks = seq(1, 2.5, by = 0.5)) +
theme_bw() +
theme(axis.text.y = element_text(size = 9),#10
axis.text.x = element_text(size = 9),#10
axis.title.x = element_text(size = 11, vjust = 0.1),#vjust = 0.1,
axis.title.y = element_text(size = 11, vjust = 0.5),#vjust = 1,
panel.grid = element_blank())
compliment <- ggplot(data = df_ell.cap.geno, aes(x = CAP1, y = CAP2, group = Genotype)) +
coord_fixed(ratio = 1) + #, xlim= c(-3.3,3.3)) + #xlim = c(-3,3.2)
geom_polygon(color = NA, fill = "gray50", alpha = 0.5) + # didn't use stat_ellipse because I wanted to plot standard errors instead of 95% confidence intervals
geom_text(data = centroids.cap.geno,
aes(x = CAP1, y = CAP2, label = Genotype), size = 2) +
#scale_x_continuous(limits = c(-3,2)) +
#geom_text(data = B.compliment, aes(x = x, y = y, label = labels),
#          inherit.aes = FALSE, size = 4) +
theme_bw() +
theme(axis.text.y = element_text(size = 6),#10
axis.text.x = element_text(size = 6),#10
axis.title.x = element_text(size = 8, vjust = 0.75),#vjust = 0.1,
axis.title.y = element_text(size = 8, vjust = 0.25),#vjust = 0.5,
panel.grid = element_blank(),
plot.margin = unit(c(0,0,0,0), "in"))
# adjust plot.margin
vp <- viewport(width = 0.4, height = 0.4, x = 0.7, y = 0.35)
tiff("~/Documents/Genotype_Networks/figures/fig_6_complexity_complimentarity.tif", width = 3.42, height = 4, units = "in", res = 600)
print(total)
print(compliment, vp = vp)
dev.off() # turn off png device
