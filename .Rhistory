#full.link.split.df$combo <- with(full.link.split.df, interaction(factor(replicate), factor(genotype.richness), sep = "_"))
## create bipartite food webs for willow-gall and gall-ptoid interactions. This enables me to accurately calculated linkage density.
willow.gall.list <- cast(filter(full.link.split.df, lower == "willow"), lower ~ upper | unique.sim)
gall.ptoid.list <- cast(filter(full.link.split.df, lower != "willow"), lower ~ upper | unique.sim) #
## this function calculates weighted linkage density, generality, and vulnerability of bipartite food webs
web.measures.Gravel <- function(web.list){
require(bipartite)
web.list.measures <- list()
unique.sim <- c()
for(i in 1:dim(web.list)){
unique.sim[i] <- names(web.list[i])
tmp.web <- web.list[[i]]
rownames(tmp.web) <- tmp.web$lower
tmp.web <- as.matrix.data.frame(tmp.web[ ,-1])
if(sum(tmp.web, na.rm = TRUE) > 0){
web.list.measures[[i]] <- networklevel(tmp.web, index = c("linkage density","generality","vulnerability"), weighted = TRUE)
} else {
web.list.measures[[i]] <- c(NA,NA,NA)
}
}
web.list.measures.df <- ldply(web.list.measures)
cbind.data.frame(unique.sim, web.list.measures.df)
}
## calculate measures separately for willow-galls and gall-parasitoids.
willow.gall.measures <- web.measures.Gravel(willow.gall.list)
gall.ptoid.measures <- web.measures.Gravel(gall.ptoid.list)
## join the results together and rename the column names
all.measures <- left_join(sim.info, willow.gall.measures, by = "unique.sim") %>%
left_join(., gall.ptoid.measures, by = "unique.sim") %>%
left_join(., covariates, by = "unique.sim")
colnames(all.measures)[5:10] <- c("link.density.plant_gall", "generality.HL.plant_gall", "vulnerability.LL.plant_gall", "link.density.gall_ptoid", "generality.HL.gall_ptoid", "vulnerability.LL.gall_ptoid")
## calculating total complexity in multiple ways gives the same results.
all.measures <- mutate(all.measures,
total_complexity = (link.density.plant_gall + link.density.gall_ptoid)/2,
total_complexity.check = (generality.HL.plant_gall + vulnerability.LL.plant_gall + generality.HL.gall_ptoid + vulnerability.LL.gall_ptoid)/4,
plants_sampled = genotype.richness*reps.sampled)
#hist(all.measures$genotype.richness)
#hist(all.measures$plants_sampled)
#plot(total_complexity ~ genotype.richness, all.measures)
#library(visreg)
#visreg(lm(total_complexity ~ plants_sampled + genotype.richness, all.measures))
#summary(lm(total_complexity ~ total.gall.abund + genotype.richness, filter(all.measures, total.gall.abund < 1000)))
#visreg(lm(total_complexity ~ total.gall.abund, filter(all.measures, total.gall.abund < 1000)))
## save the results of the simulation as a dataframe.
write.csv(all.measures, "~/Documents/Genotype_Networks/data/food web complexity simulation Gravel.csv")
#write.csv(all.measures, "~/Documents/Genotype_Networks/data/food web complexity simulation.csv")
## load required libraries
require(visreg)
require(ggplot2)
require(grid)
require(dplyr)
## upload results from simulation
all.measures <- read.csv("~/Documents/Genotype_Networks/data/food web complexity simulation Gravel.csv")
#all.measures <- read.csv("~/Documents/Genotype_Networks/data/food web complexity simulation.csv")
#dim(all.measures)[1] # 2221 unique simulations. 2425 simulations originally run
#table(all.measures$Number.of.Genotypes)
#single.complexity.max <- max(filter(all.measures, Number.of.Genotypes == 1)$total_complexity, na.rm = TRUE)
## plot updated Gravel simulation
#all.measures.4 <- filter(all.measures, reps.sampled == 4)
all.measures.NAzero <- all.measures
all.measures.NAzero[is.na(all.measures.NAzero)] <- 0
all.measures.NAone <- all.measures
all.measures.NAone[is.na(all.measures.NAone)] <- 1
# check plant sampling number
ggplot(all.measures,#,filter( plants_sampled %in% c(3,4,6,9,9,10,12)),#.NAone,
aes(x = genotype.richness, y = total_complexity, group = reps.sampled, color = reps.sampled)) + # genotype.richness
#facet_wrap(~reps.sampled, nrow = 2) +
geom_point(color = "grey", shape = 1) +
geom_smooth(size = 2)
ggplot(all.measures,#,filter( plants_sampled %in% c(3,4,6,9,9,10,12)),#.NAone,
aes(x = plants_sampled, y = total_complexity, group = genotype.richness, color = genotype.richness)) + # genotype.richness
#facet_wrap(~reps.sampled, nrow = 2) +
geom_point(color = "grey", shape = 1) +
geom_smooth(se = FALSE)
plot(log(total_complexity) ~ log(plants_sampled), all.measures)
plot(log(total_complexity) ~ log(genotype.richness), all.measures)
#plot(total_complexity ~ functional.divergence, all.measures)
plot(plants_sampled ~ genotype.richness, all.measures)
#plot(functional.divergence ~ plants_sampled, all.measures)
#plot(functional.divergence ~ genotype.richness, all.measures)
lm.1 <- lm(total_complexity ~ log(plants_sampled) + log(genotype.richness), all.measures) #+ log(genotype.richness)
summary(lm.1)
df.new <- as.data.frame(swap.web(1, df[ ,2:17])) # only interactions
colnames(df.new) <- colnames(df)[2:17]
df.new <- mutate(df.new,
Genotype = df$Genotype)
df.new
head(df.new)
dim(df.new)
adonis(df.new[,-17] ~ Genotype, df.new)
x = rowSums(df.new[ ,-17])
x
adonis(filter(df.new, x>0)[,-17] ~ Genotype, filter(df.new, x>0))
df.new
df
df.new
## run simulation ----
df.sample.list <- list()
for(j in 1:5){ #c(4,12,16,20)
sample.list <- list()
for(i in 1:100){
df.new <- as.data.frame(r2dtable(1, df[ ,2:17])) # only interactions.  first used swap.web, try r2dtable
colnames(df.new) <- colnames(df)[2:17]
df.new <- mutate(df.new,
# Genotype = df$Genotype)
#get.df <- random.info(df, sample.size = j, max.genotypes)
get.df <- get.info(df.new, sample.size = j, max.genotypes)
sample.list[[i]] <- cbind.data.frame(sim.number = i, get.df)
}
df.sample.list[[j]] <- ldply(sample.list)
}
#sample.list <- list()
#for(i in 1:10){
# get.df <- get.info(df, sample.size, max.genotypes)
#sample.list[[i]] <- cbind.data.frame(sim.number = i, get.df)
#}
df.sample.list <- ldply(df.sample.list) %>%
mutate(unique.sim = interaction(sim.number, genotype.richness, reps.sampled, sep = "_"))
sim.info <- select(df.sample.list, unique.sim, sim.number, genotype.richness, reps.sampled)
web.data <- df.sample.list %>%
select(unique.sim, willow_vLG:aSG_Tory) %>%
gather(unique.sim, interaction_freq)
covariates <- select(df.sample.list, unique.sim,
#functional.divergence,
total.gall.abund, total.gall_ptoid.abund)
## split up variable (trophic levels of pairwise interactions) for creating bipartite webs
full.link.split <- colsplit(web.data$variable, "_", names = c("lower","upper"))
full.link.split.df <- cbind(web.data, full.link.split)
#full.link.split.df$combo <- with(full.link.split.df, interaction(factor(replicate), factor(genotype.richness), sep = "_"))
## create bipartite food webs for willow-gall and gall-ptoid interactions. This enables me to accurately calculated linkage density.
willow.gall.list <- cast(filter(full.link.split.df, lower == "willow"), lower ~ upper | unique.sim)
df.sample.list <- list()
for(j in 1:5){ #c(4,12,16,20)
sample.list <- list()
for(i in 1:100){
df.new <- as.data.frame(r2dtable(1, df[ ,2:17])) # only interactions.  first used swap.web, try r2dtable
colnames(df.new) <- colnames(df)[2:17]
df.new <- mutate(df.new,
# Genotype = df$Genotype)
#get.df <- random.info(df, sample.size = j, max.genotypes)
get.df <- get.info(df.new, sample.size = j, max.genotypes)
sample.list[[i]] <- cbind.data.frame(sim.number = i, get.df)
}
df.sample.list[[j]] <- ldply(sample.list)
}
#sample.list <- list()
#for(i in 1:10){
# get.df <- get.info(df, sample.size, max.genotypes)
#sample.list[[i]] <- cbind.data.frame(sim.number = i, get.df)
#}
df.sample.list <- ldply(df.sample.list) %>%
mutate(unique.sim = interaction(sim.number, genotype.richness, reps.sampled, sep = "_"))
sim.info <- select(df.sample.list, unique.sim, sim.number, genotype.richness, reps.sampled)
web.data <- df.sample.list %>%
select(unique.sim, willow_vLG:aSG_Tory) %>%
gather(unique.sim, interaction_freq)
covariates <- select(df.sample.list, unique.sim,
#functional.divergence,
total.gall.abund, total.gall_ptoid.abund)
## split up variable (trophic levels of pairwise interactions) for creating bipartite webs
full.link.split <- colsplit(web.data$variable, "_", names = c("lower","upper"))
full.link.split.df <- cbind(web.data, full.link.split)
#full.link.split.df$combo <- with(full.link.split.df, interaction(factor(replicate), factor(genotype.richness), sep = "_"))
## create bipartite food webs for willow-gall and gall-ptoid interactions. This enables me to accurately calculated linkage density.
willow.gall.list <- cast(filter(full.link.split.df, lower == "willow"), lower ~ upper | unique.sim)
df.sample.list <- list()
for(j in 1:5){ #c(4,12,16,20)
sample.list <- list()
for(i in 1:100){
df.new <- as.data.frame(r2dtable(1, df[ ,2:17])) # only interactions.  first used swap.web, try r2dtable
colnames(df.new) <- colnames(df)[2:17]
df.new <- mutate(df.new,
Genotype = df$Genotype)
#get.df <- random.info(df, sample.size = j, max.genotypes)
get.df <- get.info(df.new, sample.size = j, max.genotypes)
sample.list[[i]] <- cbind.data.frame(sim.number = i, get.df)
}
df.sample.list[[j]] <- ldply(sample.list)
}
#sample.list <- list()
#for(i in 1:10){
# get.df <- get.info(df, sample.size, max.genotypes)
#sample.list[[i]] <- cbind.data.frame(sim.number = i, get.df)
#}
df.sample.list <- ldply(df.sample.list) %>%
mutate(unique.sim = interaction(sim.number, genotype.richness, reps.sampled, sep = "_"))
sim.info <- select(df.sample.list, unique.sim, sim.number, genotype.richness, reps.sampled)
web.data <- df.sample.list %>%
select(unique.sim, willow_vLG:aSG_Tory) %>%
gather(unique.sim, interaction_freq)
covariates <- select(df.sample.list, unique.sim,
#functional.divergence,
total.gall.abund, total.gall_ptoid.abund)
## split up variable (trophic levels of pairwise interactions) for creating bipartite webs
full.link.split <- colsplit(web.data$variable, "_", names = c("lower","upper"))
full.link.split.df <- cbind(web.data, full.link.split)
#full.link.split.df$combo <- with(full.link.split.df, interaction(factor(replicate), factor(genotype.richness), sep = "_"))
## create bipartite food webs for willow-gall and gall-ptoid interactions. This enables me to accurately calculated linkage density.
willow.gall.list <- cast(filter(full.link.split.df, lower == "willow"), lower ~ upper | unique.sim)
## run simulation ----
df.sample.list <- list()
for(j in 1:5){ #c(4,12,16,20)
sample.list <- list()
for(i in 1:100){
df.new <- as.data.frame(shuffle.web(1, df[ ,2:17])) # only interactions.  first used swap.web, try r2dtable
colnames(df.new) <- colnames(df)[2:17]
df.new <- mutate(df.new,
Genotype = df$Genotype)
#get.df <- random.info(df, sample.size = j, max.genotypes)
get.df <- get.info(df.new, sample.size = j, max.genotypes)
sample.list[[i]] <- cbind.data.frame(sim.number = i, get.df)
}
df.sample.list[[j]] <- ldply(sample.list)
}
#sample.list <- list()
#for(i in 1:10){
# get.df <- get.info(df, sample.size, max.genotypes)
#sample.list[[i]] <- cbind.data.frame(sim.number = i, get.df)
#}
df.sample.list <- ldply(df.sample.list) %>%
mutate(unique.sim = interaction(sim.number, genotype.richness, reps.sampled, sep = "_"))
sim.info <- select(df.sample.list, unique.sim, sim.number, genotype.richness, reps.sampled)
web.data <- df.sample.list %>%
select(unique.sim, willow_vLG:aSG_Tory) %>%
gather(unique.sim, interaction_freq)
covariates <- select(df.sample.list, unique.sim,
#functional.divergence,
total.gall.abund, total.gall_ptoid.abund)
## split up variable (trophic levels of pairwise interactions) for creating bipartite webs
full.link.split <- colsplit(web.data$variable, "_", names = c("lower","upper"))
full.link.split.df <- cbind(web.data, full.link.split)
#full.link.split.df$combo <- with(full.link.split.df, interaction(factor(replicate), factor(genotype.richness), sep = "_"))
## create bipartite food webs for willow-gall and gall-ptoid interactions. This enables me to accurately calculated linkage density.
willow.gall.list <- cast(filter(full.link.split.df, lower == "willow"), lower ~ upper | unique.sim)
source('~/Documents/Genotype_Networks/Rscripts/network_management_tree_level.R')
#require(mvabund)
require(bipartite)
require(tidyr)
require(FD)
df <- tree_level_interaxn_all_plants_traits_size %>%
tbl_df() %>%
filter(Genotype != "U") %>% # never collected any galls and thus gall-ptoid interactions so I removed it from the dataset.
select(Genotype,
willow_vLG = vLG_abund,
willow_rG = rG_abund,
willow_aSG = aSG_abund,
willow_SG = SG_abund,
vLG_Platy, vLG_Mesopol, vLG_Tory, vLG_Eulo, vLG_Mymarid,
rG_Platy, rG_Mesopol, rG_Tory, rG_Eulo, rG_Lestodip,
SG_Platy, aSG_Tory)
geno.avgs <- df %>%
group_by(Genotype) %>%
summarise_each(funs(mean.narm = mean(., na.rm = TRUE), n()))
geno.avgs
geno.avgs$willow_vLG_n
geno.avgs$avg.interaction <- rowMeans(geno.avgs[ ,2:17]))
geno.avgs$avg.interaction <- rowMeans(geno.avgs[ ,2:17])
geno.avgs$avg.interaction
geno.avgs[ ,2:17]>0
geno.avgs$interaction.rich <- rowSums(geno.avgs[ ,2:17]>0)
plot(interaction.rich ~ willow_vLG_n, geno.avgs)
plot(avg.interaction ~ willow_vLG_n, geno.avgs)
cor.test(geno.avgs$avg.interaction, geno.avgs$willow_vLG_n)
plot(geno.avgs$interaction.rich, geno.avgs$willow_vLG_n)
cor.test(geno.avgs$interaction.rich, geno.avgs$willow_vLG_n)
plot(geno.avgs$interaction.rich, geno.avgs$willow_vLG_n)
plot(geno.avgs$willow_vLG_n, geno.avgs$interaction.rich)
source('~/Documents/Genotype_Networks/Rscripts/network_management_tree_level.R')
source('~/Documents/miscellaneous_R/ggplot_themes.R')
source('~/Documents/ggnet/bipartite_plot_info.R')
source('~/Documents/ggnet/tripartite_plot_info.R')
require(ggplot2)
require(gridExtra)
require(dplyr)
require(tidyr)
require(vegan)
rarecurve(select(tree_level_interaxn_all_plants_traits_size,
vLG_Platy, vLG_Mesopol, vLG_Tory, vLG_Eulo,
vLG_Mymarid, rG_Tory, rG_Eulo, rG_Platy,
rG_Mesopol, rG_Lestodip, rG_Mesopol, aSG_Tory,
SG_Platy))
SG_Platy)))
interactions <- as.data.frame(tree_level_interaxn_all_plants_traits_size) %>%
select(vLG_Platy, vLG_Mesopol, vLG_Tory, vLG_Eulo,
vLG_Mymarid, rG_Tory, rG_Eulo, rG_Platy,
rG_Mesopol, rG_Lestodip, rG_Mesopol, aSG_Tory,
SG_Platy)
rarecurve(interactions)
interactions
rarecurve(interactions, sample = 2)
rarecurve(interactions, step = 1, sample = 2)
rarecurve
interaction.total <- rowSums(interactions)
interaction.total
interactions.pos <- filter(interactions, interaction.total > 0)
rarecurve(interactions.pos, step = 1, sample = 2)
rarecurve(interactions.pos, step = 1)
interactions.colSums <- colSums(interactions)
interactions.colSums
rarecurve(interactions.colSums, step = 1)
rarecurve(BCI, step = 20, sample = raremax, col = "blue", cex = 0.6)
BCI
data(BCI)
rarecurve(BCI, step = 20, sample = raremax, col = "blue", cex = 0.6)
raremax <- min(rowSums(BCI))
rarecurve(BCI, step = 20, sample = raremax, col = "blue", cex = 0.6)
interactions.colSums <- data.frame(colSums(interactions))
interactions.colSums
interactions <- as.data.frame(tree_level_interaxn_all_plants_traits_size) %>%
select(vLG_Platy, vLG_Mesopol, vLG_Tory, vLG_Eulo,
vLG_Mymarid, rG_Tory, rG_Eulo, rG_Platy,
rG_Mesopol, rG_Lestodip, rG_Mesopol, aSG_Tory,
SG_Platy) %>%
summarise_each(funs(sum))
interactions
rarecurve(interactions, step = 1)
rarecurve(interactions, step = 1, xlab = "No. of gall-parasitoid interactions sampled", ylab = "Gall-parasitoid interaction richness")
interactions <- as.data.frame(tree_level_interaxn_all_plants_traits_size) %>%
select(vLG_Platy, vLG_Mesopol, vLG_Tory, vLG_Eulo,
vLG_Mymarid, rG_Tory, rG_Eulo, rG_Platy,
rG_Mesopol, rG_Lestodip, rG_Mesopol, aSG_Tory,
SG_Platy)
specaccum(interactions)
spec.curve <- specaccum(interactions)
plot(spec.curve)
plot(spec.curve, xlab = "No. of willows sampled", ylab = "Gall-parasitoid interaction richness")
plot(spec.curve, xlab = "No. of willows sampled", ylab = "Gall-parasitoid interaction richness", ci.type = "line")
plot(spec.curve, xlab = "No. of willows sampled", ylab = "Gall-parasitoid interaction richness", ci.type = "polygon")
plot(spec.curve, xlab = "No. of willows sampled", ylab = "Gall-parasitoid interaction richness", ci.type = "polygon", col = "grey")
plot(spec.curve, xlab = "No. of willows sampled", ylab = "Gall-parasitoid interaction richness", ci.type = "bar", col = "grey")
plot(spec.curve, xlab = "No. of willows sampled", ylab = "Gall-parasitoid interaction richness", ci.type = "bar", ci.col = "grey")
plot(spec.curve, xlab = "No. of willows sampled", ylab = "Gall-parasitoid interaction richness", ci.type = "polygon", ci.col = "grey")
plot(spec.curve, xlab = "No. of willows sampled", ylab = "Gall-parasitoid interaction richness", ci.type = "line", ci.col = "grey")
plot(spec.curve, xlab = "No. of willows sampled", ylab = "Gall-parasitoid interaction richness", ci.type = "bar", ci.col = "grey")
spec.curve <- specaccum(interactions, method = "exact", permutations = 1000)
plot(spec.curve, xlab = "No. of willows sampled", ylab = "Gall-parasitoid interaction richness", ci.type = "bar", ci.col = "grey")
spec.curve <- specaccum(interactions, method = "exact", permutations = 1000)
plot(spec.curve, xlab = "No. of willows sampled", ylab = "No. of unique gall-parasitoid interactions", ci.type = "bar", ci.col = "grey")
spec.curve <- specaccum(interactions, method = "random", permutations = 1000)
plot(spec.curve, xlab = "No. of willows sampled", ylab = "No. of unique gall-parasitoid interactions", ci.type = "bar", ci.col = "grey")
spec.curve <- specaccum(interactions, method = "exact", permutations = 1000)
spec.curve <- specaccum(interactions, method = "rarefaction", permutations = 1000)
plot(spec.curve, xlab = "No. of willows sampled", ylab = "No. of unique gall-parasitoid interactions", ci.type = "bar", ci.col = "grey")
spec.curve <- specaccum(interactions, method = "exact")
plot(spec.curve, xlab = "No. of willows sampled", ylab = "No. of unique gall-parasitoid interactions", ci.type = "bar", ci.col = "grey")
str(tree_level_interaxn_all_plants_traits_size)
leaf.galls <- as.data.frame(tree_level_interaxn_all_plants_traits_size) %>%
select(Genotype, vLG.2012.density = vLG_abund,
vLG.2011, Total_Area) %>%
mutate(vLG.2011.density = vLG.2011/Total_Area)
plot(vLG.2012.density ~ vLG.2011.density, leaf.galls)
leaf.galls.summary <- leaf.galls %>%
summarise_each(funs(mean))
leaf.galls.summary
leaf.galls.summary <- leaf.galls %>%
group_by(Genotype) %>%
summarise_each(funs(mean.narm = mean(., na.rm = TRUE)))
leaf.galls.summary
lm(vLG.2012.density ~ vLG.2011.density, leaf.galls)
summary(lm(vLG.2012.density ~ vLG.2011.density, leaf.galls))
summary(lm(log(vLG.2012.density+1) ~ log(vLG.2011.density+1), leaf.galls))
plot(log(vLG.2012.density+1) ~ log(vLG.2011.density+1), leaf.galls) # interesting, negative relationship.
plot(vLG.2012.density ~ vLG.2011.density, leaf.galls.summary)
with(leaf.galls.summary, cor.test(vLG.2012.density, vLG.2011.density)
)
plot(log(vLG.2012.density+1) ~ log(vLG.2011.density+1), leaf.galls.summary)
with(leaf.galls.summary, cor.test(log(vLG.2012.density+1), log(vLG.2011.density+1)))
text(log(leaf.galls.summary$vLG.2012.density+1), log(leaf.galls.summary$vLG.2011.density+1), labels = leaf.galls.summary$Genotype)
plot(log(vLG.2012.density+1) ~ log(vLG.2011.density+1), leaf.galls.summary)
text(log(leaf.galls.summary$vLG.2012.density+1), log(leaf.galls.summary$vLG.2011.density+1), labels = leaf.galls.summary$Genotype)
leaf.galls.summary
plot(vLG.2011 ~ Total_Area, leaf.galls)
ggplot(leaf.galls, aes(x = Total_Area, y = vLG.2011)) +
geom_point() +
geom_smooth()
plot(log(vLG.2012.density+1) ~ log(vLG.2011.density+1), leaf.galls) # interesting, negative relationship.
ggplot(leaf.galls, aes(x = vLG.2011.density, y = vLG.2012.density)) +
geom_point() +
geom_smooth()
ggplot(leaf.galls.summary,
x = vLG.2011.density, y = vLG.2012.density) +
geom_point() +
geom_smooth()
ggplot(leaf.galls.summary,
aes(x = vLG.2011.density, y = vLG.2012.density)) +
geom_point() +
geom_smooth()
aes(x = sqrt(vLG.2011.density), y = sqrt(vLG.2012.density))) +
ggplot(leaf.galls.summary,
aes(x = sqrt(vLG.2011.density), y = sqrt(vLG.2012.density))) +
geom_point() +
geom_smooth()
ggplot(leaf.galls.summary,
aes(x = sqrt(vLG.2011.density), y = sqrt(vLG.2012.density))) +
geom_point() +
geom_smooth(method = "lm")
ggplot(leaf.galls.summary,
aes(x = sqrt(vLG.2011.density), y = sqrt(vLG.2012.density))) +
geom_text(labels = Genotype) +
geom_smooth(method = "lm")
ggplot(leaf.galls.summary,
aes(x = sqrt(vLG.2011.density), y = sqrt(vLG.2012.density))) +
geom_text(aes(labels = Genotype)) +
geom_smooth(method = "lm")
ggplot(leaf.galls.summary,
aes(x = sqrt(vLG.2011.density), y = sqrt(vLG.2012.density))) +
geom_text(aes(label = Genotype)) +
geom_smooth(method = "lm")
with(leaf.galls.summary, cor.test(log(vLG.2012.density+1), log(vLG.2011.density+1), method = "spearman"))
with(leaf.galls.summary,
cor.test(log(vLG.2012.density+1),
log(vLG.2011.density+1),
method = "kendall"))
with(leaf.galls.summary,
cor.test(vLG.2012.density,
vLG.2011.density,
method = "kendall"))
with(leaf.galls.summary,
cor.test(vLG.2012.density,
vLG.2011.density,
method = "spearman"))
with(leaf.galls.summary,
cor.test(vLG.2012.density,
vLG.2011.density,
method = "pearson"))
leaf.galls.summary
with(filter(leaf.galls.summary, Genotype != "Q")),
cor.test(vLG.2012.density,
vLG.2011.density,
method = "pearson"))
with(filter(leaf.galls.summary, Genotype != "Q")),
cor.test(vLG.2012.density,
vLG.2011.density,
method = "pearson"))
with(filter(leaf.galls.summary, Genotype != "Q"),
cor.test(vLG.2012.density,
vLG.2011.density,
method = "pearson"))
with(leaf.galls.summary,
cor.test(vLG.2012.density,
vLG.2011.density,
method = "pearson"))
ggplot(leaf.galls.summary,
aes(x = sqrt(vLG.2011.density), y = sqrt(vLG.2012.density))) +
geom_text(aes(label = Genotype)) +
geom_smooth(method = "lm")
ggplot(leaf.galls.summary,
aes(x = log(vLG.2011.density), y = log(vLG.2012.density))) +
geom_text(aes(label = Genotype)) +
geom_smooth(method = "lm")
with(filter(leaf.galls.summary, Genotype != c("Q","U")),
cor.test(vLG.2012.density,
vLG.2011.density,
method = "pearson"))
with(leaf.galls.summary,
cor.test(vLG.2012.density,
vLG.2011.density,
method = "pearson"))
with(leaf.galls.summary,
cor.test(sqrt(vLG.2012.density),
sqrt(vLG.2011.density),
method = "pearson"))
with(leaf.galls.summary,
cor.test(log(vLG.2012.density+1),
log(vLG.2011.density+1),
method = "pearson"))
with(leaf.galls.summary,
cor.test(sqrt(vLG.2012.density),
sqrt(vLG.2011.density),
method = "pearson"))
with(filter(leaf.galls.summary, Genotype != "X"),
cor.test(sqrt(vLG.2012.density),
sqrt(vLG.2011.density),
method = "pearson"))
with(filter(leaf.galls.summary, Genotype != "T"),
cor.test(sqrt(vLG.2012.density),
sqrt(vLG.2011.density),
method = "pearson"))
with(leaf.galls.summary,
cor.test(sqrt(vLG.2012.density),
sqrt(vLG.2011.density),
method = "pearson"))
with(leaf.galls.summary,
cor.test(sqrt(vLG.2012.density),
sqrt(vLG.2011.density),
method = "pearson"))
with(leaf.galls.summary,
cor.test(sqrt(vLG.2012.density),
sqrt(vLG.2011.density),
method = "spearman"))
with(leaf.galls.summary,
cor.test(sqrt(vLG.2012.density),
sqrt(vLG.2011.density),
method = "kendall"))
with(leaf.galls.summary,
cor.test(sqrt(vLG.2012.density),
sqrt(vLG.2011.density),
method = "pearson"))
summary(lm(sqrt(vLG.2012.density) ~ sqrt(vLG.2011.density), leaf.galls))
summary(lm(sqrt(vLG.2012.density) ~ sqrt(vLG.2011.density) + Genotype, leaf.galls))
plot(lm(sqrt(vLG.2012.density) ~ sqrt(vLG.2011.density) + Genotype, leaf.galls))
ggplot(leaf.galls, aes(x = vLG.2011.density, y = vLG.2012.density, group = Genotype, color = Genotype)) +
geom_point() +
geom_smooth()
ggplot(leaf.galls, aes(x = sqrt(vLG.2011.density),
y = sqrt(vLG.2012.density),
group = Genotype, color = Genotype)) +
geom_point() +
geom_smooth()
anova(lm(sqrt(vLG.2012.density) ~ sqrt(vLG.2011.density) + Genotype, leaf.galls))
leaf.galls.summary
max(leaf.galls.summary$vLG.2011.density)
