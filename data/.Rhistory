Tory_5 = aSG_Tory,
Eury_5 = rsLG_Eury,
Lathro_5 = rsLG_Lathro,
Mesopol_5 = vLG_Mesopol)
web.df.sum
web.df.sum <- web.df %>%
mutate(vLG_1 = vLG_Eulo + vLG_Mymarid + vLG_Tory,
rG_1 = rG_Tory,
Tory_1 = rG_Tory + vLG_Tory,
Mymarid_1 = vLG_Mymarid,
Eulo_1 = vLG_Eulo,
SG_2 = SG_Platy,
Platy_2 = SG_Platy,
rG_3 = rG_Mesopol,
vLG_3 = vLG_Platy,
Mesopol_3 = rG_Mesopol,
Platy_3 = vLG_Platy,
rG_4 = rG_Eulo + rG_Lestodip + rG_Platy,
Eulo_4 = rG_Eulo,
Lestodip_4 = rG_Lestodip,
Platy_4 = rG_Platy,
aSG_5 = aSG_Tory,
rsLG_5 = rsLG_Eury + rsLG_Lathro,
vLG_5 = vLG_Mesopol,
Tory_5 = aSG_Tory,
Eury_5 = rsLG_Eury,
Lathro_5 = rsLG_Lathro,
Mesopol_5 = vLG_Mesopol) %>%
select(Module.ID:Mesopol_5) %>%
group_by(Module.ID) %>%
summarise_each(funs(sum))
web.df.sum
web.df.sum <- web.df %>%
mutate(vLG_1 = vLG_Eulo + vLG_Mymarid + vLG_Tory,
rG_1 = rG_Tory,
Tory_1 = rG_Tory + vLG_Tory,
Mymarid_1 = vLG_Mymarid,
Eulo_1 = vLG_Eulo,
SG_2 = SG_Platy,
Platy_2 = SG_Platy,
rG_3 = rG_Mesopol,
vLG_3 = vLG_Platy,
Mesopol_3 = rG_Mesopol,
Platy_3 = vLG_Platy,
rG_4 = rG_Eulo + rG_Lestodip + rG_Platy,
Eulo_4 = rG_Eulo,
Lestodip_4 = rG_Lestodip,
Platy_4 = rG_Platy,
aSG_5 = aSG_Tory,
rsLG_5 = rsLG_Eury + rsLG_Lathro,
vLG_5 = vLG_Mesopol,
Tory_5 = aSG_Tory,
Eury_5 = rsLG_Eury,
Lathro_5 = rsLG_Lathro,
Mesopol_5 = vLG_Mesopol) %>%
select(Module.ID:Mesopol_5)
web.df.sum
web.df.sum <- web.df %>%
mutate(vLG_1 = vLG_Eulo + vLG_Mymarid + vLG_Tory,
rG_1 = rG_Tory,
Tory_1 = rG_Tory + vLG_Tory,
Mymarid_1 = vLG_Mymarid,
Eulo_1 = vLG_Eulo,
SG_2 = SG_Platy,
Platy_2 = SG_Platy,
rG_3 = rG_Mesopol,
vLG_3 = vLG_Platy,
Mesopol_3 = rG_Mesopol,
Platy_3 = vLG_Platy,
rG_4 = rG_Eulo + rG_Lestodip + rG_Platy,
Eulo_4 = rG_Eulo,
Lestodip_4 = rG_Lestodip,
Platy_4 = rG_Platy,
aSG_5 = aSG_Tory,
rsLG_5 = rsLG_Eury + rsLG_Lathro,
vLG_5 = vLG_Mesopol,
Tory_5 = aSG_Tory,
Eury_5 = rsLG_Eury,
Lathro_5 = rsLG_Lathro,
Mesopol_5 = vLG_Mesopol) %>%
select(Module.ID:Mesopol_5) %>%
group_by(Module.ID) %>%
summarise_each(funs(sum))
web.df.sum
melt(web.df.sum)
melt(web.df.sum, id.vars = "Module.ID")
web.df.sum <- web.df %>%
group_by(Module.ID) %>%
summarise(funs(sum))
web.df
web.df.sum <- web.df %>%
group_by(Module.ID) %>%
select(-Genotypes) %>%
summarise(funs(sum))
web.df.sum <- web.df %>%
group_by(Module.ID) %>%
select(-Genotypes) %>%
summarise_each(funs(sum))
web.df.sum
web.df.sum <- web.df %>%
group_by(Module.ID) %>%
select(-Genotypes) %>%
summarise_each(funs(sum)) %>%
melt(id.vars = "Module.ID")
web.df.sum
web.df.sum <- web.df %>%
group_by(Module.ID) %>%
select(-Genotypes) %>%
summarise_each(funs(sum)) %>%
melt(id.vars = "Module.ID") %>%
mutate(rGs = starts_with("rG"))
mod1 <- web.df %>%
filter(Module.ID == 1) %>%
select(rG_Tory:vLG_Tory)
mod1
mod1 <- web.df %>%
filter(Module.ID == 1) %>%
select(rG_Tory:vLG_Tory) %>%
mutate(vLG = vLG_Eulo + vLG_Mymarid + vLG_Tory,
rG = rG_Tory,
Tory = rG_Tory + vLG_Tory,
Mymarid = vLG_Mymarid,
Eulo = vLG_Eulo)
mod1
mod1 <- web.df %>%
filter(Module.ID == 1) %>%
select(rG_Tory:vLG_Tory) %>%
mutate(vLG = vLG_Eulo + vLG_Mymarid + vLG_Tory,
rG = rG_Tory,
Tory = rG_Tory + vLG_Tory,
Mymarid = vLG_Mymarid,
Eulo = vLG_Eulo) %>%
select(vLG:Eulo) %>%
melt()
mod1
mod1 <- web.df %>%
group_by(Module.ID) %>%
filter(Module.ID == 1) %>%
select(rG_Tory:vLG_Tory) %>%
mutate(vLG = vLG_Eulo + vLG_Mymarid + vLG_Tory,
rG = rG_Tory,
Tory = rG_Tory + vLG_Tory,
Mymarid = vLG_Mymarid,
Eulo = vLG_Eulo) %>%
select(vLG:Eulo) %>%
melt()
mod1
mod1 <- web.df %>%
group_by(Module.ID) %>%
filter(Module.ID == 1) %>%
select(rG_Tory:vLG_Tory) %>%
mutate(vLG = vLG_Eulo + vLG_Mymarid + vLG_Tory,
rG = rG_Tory,
Tory = rG_Tory + vLG_Tory,
Mymarid = vLG_Mymarid,
Eulo = vLG_Eulo) %>%
select(vLG:Eulo) %>%
melt(id.vars = Module.ID)
mod1 <- web.df %>%
filter(Module.ID == 1) %>%
select(Module.ID, rG_Tory:vLG_Tory) %>%
mutate(vLG = vLG_Eulo + vLG_Mymarid + vLG_Tory,
rG = rG_Tory,
Tory = rG_Tory + vLG_Tory,
Mymarid = vLG_Mymarid,
Eulo = vLG_Eulo) %>%
select(vLG:Eulo) %>%
melt(id.vars = Module.ID)
mod1 <- web.df %>%
filter(Module.ID == 1) %>%
select(Module.ID, rG_Tory:vLG_Tory)
mod1 <- web.df %>%
filter(Module.ID == 1) %>%
select(Module.ID, rG_Tory:vLG_Tory) %>%
mutate(vLG = vLG_Eulo + vLG_Mymarid + vLG_Tory,
rG = rG_Tory,
Tory = rG_Tory + vLG_Tory,
Mymarid = vLG_Mymarid,
Eulo = vLG_Eulo) %>%
select(Module.ID, vLG:Eulo) %>%
melt(id.vars = Module.ID)
mod1 <- web.df %>%
filter(Module.ID == 1) %>%
select(Module.ID, rG_Tory:vLG_Tory)
mod1
mod1 <- web.df %>%
filter(Module.ID == 1) %>%
select(Module.ID, rG_Tory:vLG_Tory) %>%
mutate(vLG = vLG_Eulo + vLG_Mymarid + vLG_Tory,
rG = rG_Tory,
Tory = rG_Tory + vLG_Tory,
Mymarid = vLG_Mymarid,
Eulo = vLG_Eulo) %>%
select(Module.ID, vLG:Eulo)
mod1
mod1 <- web.df %>%
filter(Module.ID == 1) %>%
select(Module.ID, rG_Tory:vLG_Tory) %>%
mutate(vLG = vLG_Eulo + vLG_Mymarid + vLG_Tory,
rG = rG_Tory,
Tory = rG_Tory + vLG_Tory,
Mymarid = vLG_Mymarid,
Eulo = vLG_Eulo) %>%
select(Module.ID, vLG:Eulo) %>%
melt(id.vars = "Module.ID")
mod1
mod1 <- web.df %>%
filter(Module.ID == 1) %>%
select(Module.ID, rG_Tory:vLG_Tory) %>%
mutate(vLG = vLG_Eulo + vLG_Mymarid + vLG_Tory,
rG = rG_Tory,
Tory = rG_Tory + vLG_Tory,
Mymarid = vLG_Mymarid,
Eulo = vLG_Eulo) %>%
select(Module.ID, vLG:Eulo) %>%
group_by(Module.ID) %>%
summarise_each(funs(sum))
mod1
mod1 <- web.df %>%
filter(Module.ID == 1) %>%
select(Module.ID, rG_Tory:vLG_Tory) %>%
mutate(vLG = vLG_Eulo + vLG_Mymarid + vLG_Tory,
rG = rG_Tory,
Tory = rG_Tory + vLG_Tory,
Mymarid = vLG_Mymarid,
Eulo = vLG_Eulo) %>%
select(Module.ID, vLG:Eulo) %>%
group_by(Module.ID) %>%
summarise_each(funs(sum))
melt(id.vars = "Module.ID")
mod1 <- web.df %>%
filter(Module.ID == 1) %>%
select(Module.ID, rG_Tory:vLG_Tory) %>%
mutate(vLG = vLG_Eulo + vLG_Mymarid + vLG_Tory,
rG = rG_Tory,
Tory = rG_Tory + vLG_Tory,
Mymarid = vLG_Mymarid,
Eulo = vLG_Eulo) %>%
select(Module.ID, vLG:Eulo) %>%
group_by(Module.ID) %>%
summarise_each(funs(sum)) %>%
melt(id.vars = "Module.ID")
mod1
mod2 <-  web.df %>%
filter(Module.ID == 2) %>%
select(Module.ID, SG_Platy) %>%
mutate(SG = SG_Platy,
Platy = SG_Platy) %>%
select(Module.ID, SG:Platy) %>%
group_by(Module.ID) %>%
summarise_each(funs(sum)) %>%
melt(id.vars = "Module.ID")
mod2
web.df
mod3 <- web.df %>%
filter(Module.ID == 3) %>%
select(Module.ID, rG_Mesopol:vLG_Platy) %>%
mutate(rG = rG_Mesopol,
vLG = vLG_Platy,
Mesopol = rG_Mesopol,
Platy = vLG_Platy) %>%
select(Module.ID, rG:Platy) %>%
group_by(Module.ID) %>%
summarise_each(funs(sum)) %>%
melt(id.vars = "Module.ID")
mod3
rbind_all(list(mod1, mod2, mod3))
t <- rbind_all(list(mod1, mod2, mod3))
str(t)
qplot(factor(variable), data = t, geom="bar", fill = factor(Module.ID))
library(ggplot2)
qplot(factor(variable), data = t, geom="bar", fill = factor(Module.ID))
qplot(factor(variable), data = t, geom="bar", fill = factor(Module.ID)) + coord_polor(theta = "y")
qplot(factor(variable), data = t, geom="bar", fill = factor(Module.ID)) + coord_polar(theta = "y")
ggplot(data = select(t, variable == Platy), aes(x = factor(1), y = value, fill = factor(Module.ID)))
ggplot(data = select(t, variable == "Platy"), aes(x = factor(1), y = value, fill = factor(Module.ID)))
ggplot(data = select(t, variable == "Platy"), aes(x = factor(1), y = value, fill = factor(Module.ID))) + geom_bar(width = 1)
?geom_bar
ggplot(data = select(t, variable == "Platy"), aes(y = value, fill = factor(Module.ID))) + geom_bar(width = 1)
ggplot(data = select(t, variable == "Platy"), aes(y = value, fill = factor(Module.ID))) + geom_bar(x = factor(1))
select(t, variable == "Platy")
select(t, variable == Platy)
filter(t, variable == "Platy")
filter(t, variable == Platy)
ggplot(data = filter(t, variable == "Platy"), aes(y = value, fill = factor(Module.ID))) + geom_bar(x = factor(1))
ggplot(data = filter(t, variable == "Platy"), aes(x = factor(1), y = value, fill = factor(Module.ID))) + geom_bar()
ggplot(data = filter(t, variable == "Platy"), aes(x = factor(1), y = value, fill = factor(Module.ID))) + geom_bar(stat = "bin")
t
38/43
filter(t, variable == "Platy")
ggplot(data = filter(t, variable == "Platy"), aes(x = factor(1), y = value, fill = factor(Module.ID))) + geom_bar()
ggplot(data = filter(t, variable == "Platy"), aes(x = factor(1), y = value, fill = factor(Module.ID)))
ggplot(data = filter(t, variable == "Platy"), aes(x = factor(1), y = value, fill = factor(Module.ID))) + geom_bar()
ggplot(data = filter(t, variable == "Platy"), aes(x = factor(1), y = value, fill = factor(Module.ID))) + geom_bar(stat = "identity")
ggplot(data = filter(t, variable == "Platy"), aes(x = factor(1), y = value, fill = factor(Module.ID))) + geom_bar(stat = "ndensity")
ggplot(data = filter(t, variable == "Platy"), aes(x = factor(1), y = value, fill = factor(Module.ID))) + geom_bar(stat = "identity")
ggplot(data = filter(t, variable == "Platy"), aes(x = factor(1), y = value, fill = factor(Module.ID))) + geom_bar(stat = "identity") + coord_polar(theta = "y")
source('~/Documents/Genotype_Networks/Rscripts/matrix_highlights.R')
source('~/Documents/Genotype_Networks/Rscripts/plotweb2_highlights.R')
source('~/Documents/ggnet/bipartite_plot_info.R')
source('~/Documents/ggnet/tripartite_plot_info.R')
source('~/Documents/ggnet/ggnet_bipartite.R')
library(reshape)
library(reshape2)
library(bipartite)
library(dplyr)
########### upload datasets
###  upload general molten gall network data
gall_net_melt <- read.csv("~/Documents/Genotype_Networks/data/gall_network_data.csv")
gall_net_melt <- tbl_df(gall_net_melt)
total_gall_parasitoid_network <- gall_net_melt %>%
filter(gall_contents %in% c("aSG.larv", "Pont.ad", "Pont.prep", "rG.larv", "SG.larv", "vLG.pupa", "Eulo.fem", "Eulo.mal", "Eury.fem", "Eury.mal", "Lathro.fem", "Lathro.mal", "Lestodip", "Mesopol", "Mymarid", "Platy", "Ptero.2", "Tory.fem", "Tory.mal"))
total_gall_parasitoid_network <- mutate(total_gall_parasitoid_network, gall_contents_collapse = revalue(gall_contents, c("Pont.ad" = "Pont.surv", "Pont.prep" = "Pont.surv", "Eulo.fem" = "Eulo", "Eulo.mal" = "Eulo", "Eury.fem" = "Eury", "Eury.mal" = "Eury", "Lathro.fem" = "Lathro", "Lathro.mal" = "Lathro", "Ptero.2" = "Mesopol", "Tory.fem" = "Tory", "Tory.mal" = "Tory") ))
# shoot estimates on a genotype level
shootEsts_df <- gall_net_melt %>%
mutate(plant.position = as.factor(plant.position)) %>%
group_by(Gender, Genotype, plant.position) %>%
summarise(shootEst.no18 = mean(shootEst.no18), shootEst.all = mean(shootEst.all), galls.found = mean(Galls.found)) # needed to take the mean because these shoot estimates are duplicated throughout the molten dataframe
shootEsts_df <- mutate(shootEsts_df, plant.position = as.character(plant.position))
shootEsts_genotype_df <- shootEsts_df %>%
group_by(Genotype) %>%
summarise(n = n(), shootEst.no18 = sum(shootEst.no18), shootEst.all = sum(shootEst.all))
### Sequence of genotypes and galls for plotting. Parasitoid can stay in their order as is
seq.cca.geno = c("*","P","Y","Q","H","R","W","A","N","J","D","F","I","Z","T","S","K","X","G","O","B","V","U","M","L","E")
seq.cca.galls = c("SG","rG","aSG","rsLG","vLG")
### genotype-gall food web adjusted to represent density per 1000 shoots
genotype_gall_network <- dcast(total_gall_parasitoid_network, Genotype ~ gall.sp, sum)
rownames(genotype_gall_network) <- genotype_gall_network$Genotype
genotype_gall_network <- select(genotype_gall_network, -Genotype)
genotype_gall_network_density <- genotype_gall_network/shootEsts_genotype_df$shootEst.no18*1000
genotype_gall_network_density <- genotype_gall_network_density[seq.cca.geno, seq.cca.galls]
### collapsing different willow genotypes to a single species
willow_gall_network <- as.matrix(colSums(genotype_gall_network_density)[c(4,2,1,3,5)]) # reorder to be consistent with cca plotting in genotype-gall-parasitoid network
willow_gall_network <- t(willow_gall_network)
rownames(willow_gall_network) <- "Salix hookeriana"
### gall-parasitoid food web adjusted to represent density per 1000 shoots
total_gall_parasitoid_network <- dcast(total_gall_parasitoid_network, gall.sp ~ gall_contents_collapse, sum)
rownames(total_gall_parasitoid_network) <- total_gall_parasitoid_network$gall.sp
total_gall_parasitoid_network <- select(total_gall_parasitoid_network, -gall.sp)
interaxns_focus <- select(total_gall_parasitoid_network, -c(aSG.larv, Pont.surv, rG.larv, SG.larv, vLG.pupa))
interaxns_focus_density <- interaxns_focus/shootEsts_genotype_df$shootEst.no18*1000
interaxns_focus_density <- interaxns_focus_density[seq.cca.galls, ]
# gall-parasitoid interactions occuring on each genotype. Already adjusted per density of 1000 shoots
genotype_gall_parasitoid_network <- read.csv('~/Documents/Genotype_Networks/data/genotype_gall_parasitoid_network_data.csv')
rownames(genotype_gall_parasitoid_network) <- genotype_gall_parasitoid_network$X
genotype_gall_parasitoid_network <- select(genotype_gall_parasitoid_network, -X)
module.info <- read.csv('~/Documents/Genotype_Networks/data/module_info_genotype_gall_parasitoid_network.csv')
module.info <- arrange(module.info, Trophic, Module.ID, Vertex) # reorder for easy plotting
genotypes <- filter(module.info, Trophic == "Genotype")
gall.parasitoid <- filter(module.info, Trophic == "Gall-Parasitoid")
melt.low.whole <- mutate(genotype_gall_network_density, Genotypes = rownames(genotype_gall_network_density))
melt.low.whole <- melt(melt.low.whole, id.vars = "Genotypes") %>%
filter(value > 0) %>%
select(X1 = Genotypes, X2 = variable, value)
melt.up.whole <- mutate(interaxns_focus_density, Galls = rownames(interaxns_focus_density))
melt.up.whole <- melt(melt.up.whole, id.vars = "Galls") %>%
filter(value > 0) %>%
select(X1 = Galls, X2 = variable, value)
melt.whole <- rbind_all(list(melt.low.whole, melt.up.whole))
net.whole <- network(melt.whole, directed = TRUE, matrix.type = "edgelist")
net.whole.i <- graph.edgelist(as.matrix(melt.whole)[,1:2])
library(igraph)
net.whole.i <- graph.edgelist(as.matrix(melt.whole)[,1:2])
E(net.whole.i)$weight <- melt.whole$value
t <- tripartite_plot_info(net.whole.i)
extras <- t[[2]]
extras
extras <- mutate(extras, vertex.weights.TLscaled = c(vertex.weights[1:26]/max(vertex.weights[1:26]), vertex.weights[27:31]/max(vertex.weights[27:31]), vertex.weights[32:39]/max(vertex.weights[32:39])),
vertex.names = as.character(vertex.names))
ptoid.colors <- colorRampPalette(c("lighgrey","darkgrey"))(8)
ptoid.colors <- colorRampPalette(c("lightgrey","darkgrey"))(8)
extras <- t[[2]]
extras <- mutate(extras, vertex.weights.TLscaled = c(vertex.weights[1:26]/max(vertex.weights[1:26]), vertex.weights[27:31]/max(vertex.weights[27:31]), vertex.weights[32:39]/max(vertex.weights[32:39])),
vertex.names = as.character(vertex.names),
vertex.colors = c(geno.colors, gall.colors, ptoid.colors))
geno.colors <- colorRampPalette(c("lightgreen","darkgreen"))(26)
gall.colors <- colorRampPalette(c("lightblue","darkblue"))(5)
ptoid.colors <- colorRampPalette(c("lightgrey","darkgrey"))(8)
extras <- t[[2]]
extras <- mutate(extras, vertex.weights.TLscaled = c(vertex.weights[1:26]/max(vertex.weights[1:26]), vertex.weights[27:31]/max(vertex.weights[27:31]), vertex.weights[32:39]/max(vertex.weights[32:39])),
vertex.names = as.character(vertex.names),
vertex.colors = c(geno.colors, gall.colors, ptoid.colors))
ggnet_bipartite(t, range = c(1/10,1))
ggnet_bipartite(t, range = c(1/10,1)) +
geom_point(data = extras, aes(x = x, y = y, fill = vertex.names), shape = 21, size = extras$vertex.weights.TLscaled*15)
ggnet_bipartite(t, range = c(1/10,1)) +
geom_point(data = extras, aes(x = x, y = y, fill = vertex.names), shape = 21, size = extras$vertex.weights.TLscaled*15) + scale_fill_manual(values = extras$vertex.colors) +
ggnet_bipartite(t, range = c(1/10,1)) +
geom_point(data = extras, aes(x = x, y = y, fill = vertex.names), shape = 21, size = extras$vertex.weights.TLscaled*15) + scale_fill_manual(values = extras$vertex.colors) + geom_text(data = extras, aes(x = x, y = y, label = vertex.names))
extras <- t[[2]]
extras <- mutate(extras, vertex.weights.TLscaled = c(vertex.weights[1:26]/max(vertex.weights[1:26]), vertex.weights[27:31]/max(vertex.weights[27:31]), vertex.weights[32:39]/max(vertex.weights[32:39])),
vertex.names = factor(as.character(vertex.names), levels = unique(as.character(vertex.names)), ordered = TRUE),
vertex.colors = c(geno.colors, gall.colors, ptoid.colors))
ggnet_bipartite(t, range = c(1/10,1)) +
geom_point(data = extras, aes(x = x, y = y, fill = vertex.names), shape = 21, size = extras$vertex.weights.TLscaled*15) + scale_fill_manual(values = extras$vertex.colors) + geom_text(data = extras, aes(x = x, y = y, label = vertex.names))
ggnet_bipartite(t, range = c(1/10,1)) +
geom_point(data = extras, aes(x = x, y = y, fill = vertex.names), shape = 21, size = extras$vertex.weights.TLscaled*15) + scale_fill_manual(values = extras$vertex.colors)# + geom_text(data = extras, aes(x = x, y = y, label = vertex.names))
t[[1]]
head(t[[2]])
head(t[[1]])
t[[1]][100:200]
t[[1]][100:200,]
t[[1]][10000:10100,]
net.whole.i
ggnet(net.whole.i)
library(GGally)
ggnet(net.whole.i)
ggnet(net.whole.i, top8.nodes = TRUE)
######## Tree level Network, Community, and Species level analysis
#### upload necessary packages
# analysis
library(mvabund)
library(vegan)
library(visreg)
library(bipartite)
library(car)
# data manipulation. order of libraries is important. always load dplyr last.
library(reshape2)
library(reshape)
library(dplyr)
# plotting
library(ggplot2)
# upload data
tree_level_interaxn_all_plants <- read.csv("~/Documents/Genotype_Networks/data/tree_level_interaxn_all_plants.csv")
table(tree_level_interaxn_all_plants$Genotype)
mean(table(tree_level_interaxn_all_plants$Genotype))
median(table(tree_level_interaxn_all_plants$Genotype))
sum(table(tree_level_interaxn_all_plants$Genotype))
dim(tree_level_interaxn_all_plants)
library(dplyr)
# setworking directions
setwd('~/Documents/Genotype_Networks/data/')
# upload data
allom <- read.csv("~/Documents/Genotype_Networks/data/Allometry - Willow Garden - 2012.csv")
stem.diams <- read.csv("~/Documents/Genotype_Networks/data/survey_2_stem_diams.csv", skip=1)
# explore data
head(allom)
str(allom)
str(stem.diams)
# look at data distributions
hist(allom$Stem.Diamter)
hist(log(allom$Stem.Diamter)) # normalizes distribution
hist(allom$Leaf.Estimate)
hist(log(allom$Leaf.Estimate)) # normalizes distribution more
hist(allom$Shoot.Count)
hist(log(allom$Shoot.Count)) # distribution more normalized except for one outlier
plot(log(Shoot.Count)~log(Stem.Diamter), allom)
lm.shoot <- lm(log(Shoot.Count)~log(Stem.Diamter), allom[-18,])
summary(lm.shoot) # model explains 61.3% of the variance with the quadratic fit.
abline(lm.shoot)
plot(lm.shoot) # point 18 appears to be an outlier, but is also the smallest branch s
lm.shoot <- lm(log(Shoot.Count)~log(Stem.Diamter), allom)
summary(lm.shoot) # model explains 61.3% of the variance with the quadratic fit.
plot(log(Shoot.Count)~log(Stem.Diamter), allom)
lm.shoot <- lm(log(Shoot.Count)~log(Stem.Diamter), allom)
summary(lm.shoot) # model explains 61.3% of the variance with the quadratic fit.
abline(lm.shoot)
plot(lm.shoot) # point 18 appears to be an outlier, but is also the smallest branch s
lm.shoot <- lm(log(Shoot.Count)~poly(log(Stem.Diamter),2), allom)
summary(lm.shoot) # model explains 61.3% of the variance with the quadratic fit.
lm.shoot <- lm(log(Shoot.Count)~I(log(Stem.Diamter)^2), allom)
summary(lm.shoot) # model explains 61.3% of the variance with the quadratic fit.
lm.shoot <- lm(log(Shoot.Count)~log(Stem.Diamter) + I(log(Stem.Diamter)^2), allom)
summary(lm.shoot) # model explains 61.3% of the variance with the quadratic fit.
plot(log(Shoot.Count)~log(Stem.Diamter), allom)
plot(Shoot.Count ~ Stem.Diamter, allom)
lm.shoot.notrans <- lm(Shoot.Count ~ Stem.Diamter, allom)
summary(lm.shoot.notrans)
abline(lm.shoot.notrans)
plot(lm.shoot.notrans)
lm.shoot <- lm(log(Shoot.Count)~log(Stem.Diamter), allom)
summary(lm.shoot) # model explains 61.3% of the variance with the quadratic fit.
plot(log(Shoot.Count) ~ log(Stem.Diamter), allom[-18,])
abline(lm.shoot)
lm.shoot <- lm(log(Shoot.Count)~log(Stem.Diamter), allom)
summary(lm.shoot) # model explains 61.3% of the variance with the quadratic fit.
lm.shoot <- lm(log(Shoot.Count)~log(Stem.Diamter), allom)
summary(lm.shoot) # model explains 61.3% of the variance with the quadratic fit.
plot(lm.shoot) # point 18 appears to be an outlier, but is also the smallest branch s
lm.shoot <- lm(log(Shoot.Count)~log(Stem.Diamter), allom[-18,])
summary(lm.shoot) # model explains 61.3% of the variance with the quadratic fit.
plot(lm.shoot) # point 18 appears to be an outlier, but is also the smallest branch s
library(visreg)
visreg(lm.shoot)
visreg(lm.shoot, scale = "response")
visreg(lm.shoot, trans = exp)
visreg(lm.shoot, trans = exp)
shoot.data <- visreg(lm.shoot, trans = exp)
shoot.data
cbind(shoot.data$Stem.Diamter$y$r)
stem.diams.shootEst <- transform(stem.diams, shootEst.all = exp(log(Stem.Diameter.mm)*3.7245 - 8.7794), shootEst.no18 = exp(log(Stem.Diameter.mm)*3.0371 - 6.1602))
cbind(shoot.data$Stem.Diamter$y$r, stem.diams.shootEst$shootEst.no18)
stem.diams
stem.diams.shootEst <- transform(stem.diams, shootEst.all = exp(log(Stem.Diameter.mm)*3.7245 - 8.7794), shootEst.no18 = exp(log(Stem.Diameter.mm)*3.0371) - 6.1602)
cbind(shoot.data$Stem.Diamter$y$r, stem.diams.shootEst$shootEst.no18)
stem.diams.shootEst <- transform(stem.diams, shootEst.all = exp(log(Stem.Diameter.mm)*3.7245 - 8.7794), shootEst.no18 = exp(log(Stem.Diameter.mm)*3.0371 - 6.1602))
cbind(shoot.data$Stem.Diamter$y$r, stem.diams.shootEst$shootEst.no18)
cbind(shoot.data$Stem.Diamter$y$r, exp(log(allom$Stem.Diamter)*3.0371 - 6.1602))
dim(allom)
log(allom$Stem.Diamter)
log(allom$Stem.Diamter)*3.0371
log(allom$Stem.Diamter)*3.0371-6.1602
exp(log(allom$Stem.Diamter)*3.0371-6.1602)
exp(log(allom$Stem.Diamter)*3.0371)-6.1602
shoot.data
allom$Stem.Diamter
cbind(shoot.data$Stem.Diamter$y$r, exp(log(allom$Stem.Diamter)*3.0371 - 6.1602))
cbind(allom$Stem.Diamter, shoot.data$Stem.Diamter$y$r, exp(log(allom$Stem.Diamter)*3.0371 - 6.1602))
cbind(allom$Stem.Diamter, shoot.data$Stem.Diamter$y$r, exp(log(allom$Stem.Diamter)*3.0371 - 6.1602), log(allom$Stem.Diamter)*3.0371 - 10*6.1602)
log(allom$Stem.Diamter)*3.0371 - 6.1602
exp(5)
lm.shoot.visreg <- visreg(lm.shoot, trans = exp)
